class Solution:
    """
    小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y，
    其中字符 r 表示一片红叶，字符 y 表示一片黄叶。
    出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。
    每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。
    请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。
    """
    def minimumOperations(self, leaves: str) -> int:
        """
        我们想要将收藏集中树叶的排列调整成「红、黄、红」三部分，因此我们可以用 3 个状态分别表示其中的每一部分，
        即状态 0和状态 2 分别表示前面和后面的红色部分，状态 1 表示黄色部分。

        此时，我们就可以尝试使用动态规划解决本题了。我们用 f[i][j]表示对于第 0片到第 i 片叶子
        进行调整操作，并且第 i 片叶子处于状态 j 时的最小操作次数。在推导状态转移方程时，我们可以分别对于每一种状态进行分析。
        当 j=0 时，我们需要将第 i 片叶子变成红色，并且第 i−1片叶子也只能处于 j=0的状态（因为没有编号更小的状态了），因此有状态转移方程：
        f[i][0]=f[i−1][0]+isYellow(i)

        当 j=1 时，我们需要将第 i 片叶子变成黄色，而第 i−1片叶子既可以处于 j=1的状态，也可以处于 j=0的状态，我们选择其中的较小值，因此有状态转移方程：
        f[i][1]=min{f[i−1][0],f[i−1][1]}+isRed(i)
        当 j=2时，我们需要将第i片叶子变成红色，而第 i−1片叶子即可以处于 j=2的状态，也可以处于 j=1的状态（注意这里不能处于 j=0的状态，因为每一种状态包含的叶子数量必须至少为 1）
        f[i][2]=min{f[i−1][1],f[i−1][2]}+isYellow(i)
        。。。。。。。
        2020/11/23
        懵逼
        :param leaves:
        :return:
        """
        n = len(leaves)
        f = [[0, 0, 0] for _ in range(n)]
        f[0][0] = int(leaves[0] == "y")
        f[0][1] = f[0][2] = f[1][2] = float("inf")

        for i in range(1, n):
            isRed = int(leaves[i] == "r")
            isYellow = int(leaves[i] == "y")
            f[i][0] = f[i - 1][0] + isYellow
            f[i][1] = min(f[i - 1][0], f[i - 1][1]) + isRed
            if i >= 2:
                f[i][2] = min(f[i - 1][1], f[i - 1][2]) + isYellow

        return f[n - 1][2]
